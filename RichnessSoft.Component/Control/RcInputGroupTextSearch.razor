@* INPUT GROUP  : Textbox with button search *@
@* กรณีเพิ่ม Parameter ต้องกำหนด SetParametersAsync เสมอ มันเกี่ยวกับเรื่อง Performance *@
@using RichnessSoft.Component.Shared

<div class="@InputGroupSize">
    <RcDxTextBoxManualBind BindValue="@BindValue" ControlID="@ControlID" Enabled="@Enabled" InputName="@InputName" IsViewOnly="@IsViewOnly" NullText="@NullText" CssClass="@CssClass" DisplayFormat="@DisplayFormat" TextChanged="@TextChanged"></RcDxTextBoxManualBind>
    <div class="input-group-append">
        <button class="btn btn-outline-secondary " type="button" title="@Lang.SysCode("ค้นหา", "Search")" @onclick="@ButtonClick"><i class="fas fa-search"></i></button>
    </div>
</div>
@code {
    [Parameter]
    public string ControlID { get; set; } = "inputGroupID";
    [Parameter]
    public string BindValue { get; set; }
    [Parameter]
    public bool IsViewOnly { get; set; } = false;
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> ButtonClick { get; set; }
    [Parameter]
    public EventCallback<string> TextChanged { get; set; }
    [Parameter]
    public string NullText { get; set; } = "";
    [Parameter]
    public string InputName { get; set; } = "inputGroupName";
    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string DisplayFormat { get; set; } = "";

    private string InputGroupSize { get; set; } = "input-group";
    Dictionary<string, object> dictAttributes;
    protected override void OnInitialized()
    {
        dictAttributes = new Dictionary<string, object>();
        dictAttributes.Add("name1", InputName);
    }
    protected override async Task OnInitializedAsync()
    {
        this.InputGroupSize =  WebConstUtil.Control.GetInputGroupSize(WebConstUtil.Control.ControlType.TEXT);
        await InvokeAsync(StateHasChanged);
    }
    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(ControlID):
                    ControlID = (string)parameter.Value;
                    break;
                case nameof(BindValue):
                    BindValue = (string)parameter.Value;
                    break;
                case nameof(IsViewOnly):
                    IsViewOnly = (bool)parameter.Value;
                    break;
                case nameof(Enabled):
                    Enabled = (bool)parameter.Value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)parameter.Value;
                    break;
                case nameof(ButtonClick):
                    ButtonClick = (EventCallback<MouseEventArgs>)parameter.Value;
                    break;
                case nameof(TextChanged):
                    TextChanged = (EventCallback<string>)parameter.Value;
                    break;
                case nameof(NullText):
                    NullText = (string)parameter.Value;
                    break;
                case nameof(InputName):
                    InputName = (string)parameter.Value;
                    break;
                case nameof(CssClass):
                    CssClass = (string)parameter.Value;
                    break;
                case nameof(DisplayFormat):
                    DisplayFormat = (string)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    public void gmSetAttributes(string key, object value)
    {
        if (dictAttributes is not null && key is not null && value is not null && dictAttributes.ContainsKey(key) == false)
        {
            dictAttributes.Add(key, value);
        }
    }
}

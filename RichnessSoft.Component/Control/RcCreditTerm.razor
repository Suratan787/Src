@* Text : Numberic *@
@* กรณีเพิ่ม Parameter ต้องกำหนด SetParametersAsync เสมอ มันเกี่ยวกับเรื่อง Performance *@
@using RichnessSoft.Component.Shared
<DxSpinEdit InputId="@ControlID"
            Value="@BindValue"
            BindValueMode="BindValueMode.OnInput"
            ClearButtonDisplayMode="@ClearButtonDisplayMode"
            Increment="1"
            MinValue="0"
            MaxValue="1000"
            ShowSpinButtons="@ShowSpinButtons"
            SizeMode="@WebConstUtil.Control.goSpinEditSize"
            T="Int32"
            DisplayFormat="N0"
            Attributes="@dictAttributes"
            ValueExpression="@(() => BindValue)"
            ValueChanged="@ValueChanged"
            InputCssClass="@CssClass"
            CssClass="@CssClass"
            NullText="@NullText"
            Enabled="@Enabled"
            ReadOnly="@IsViewOnly">
</DxSpinEdit>

@code {
    [Parameter]
    public string ControlID { get; set; } = "txtCreditTerm";
    [Parameter]
    public int BindValue { get; set; } = 0;
    [Parameter]
    public bool IsViewOnly { get; set; } = false;
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public bool ShowSpinButtons { get; set; } = false;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<Int32> ValueChanged { get; set; }
    [Parameter]
    public string CssClass { get; set; } = "text-right";
    [Parameter]
    public DevExpress.Blazor.DataEditorClearButtonDisplayMode ClearButtonDisplayMode { get; set; } = DevExpress.Blazor.DataEditorClearButtonDisplayMode.Never;
    [Parameter]
    public string NullText { get; set; } = "0";
    [Parameter]
    public string InputName { get; set; } = "txtCreditTerm";

    Dictionary<string, object> dictAttributes;
    protected override void OnInitialized()
    {
        dictAttributes = new Dictionary<string, object>();
        dictAttributes.Add("name1", InputName);
    }
    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(ControlID):
                    ControlID = (string)parameter.Value;
                    break;
                case nameof(BindValue):
                    BindValue = (int)parameter.Value;
                    break;
                case nameof(IsViewOnly):
                    IsViewOnly = (bool)parameter.Value;
                    break;
                case nameof(Enabled):
                    Enabled = (bool)parameter.Value;
                    break;
                case nameof(ShowSpinButtons):
                    ShowSpinButtons = (bool)parameter.Value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)parameter.Value;
                    break;
                case nameof(ValueChanged):
                    ValueChanged = (EventCallback<Int32>)parameter.Value;
                    break;
                case nameof(CssClass):
                    CssClass = (string)parameter.Value;
                    break;
                case nameof(ClearButtonDisplayMode):
                    ClearButtonDisplayMode = (DevExpress.Blazor.DataEditorClearButtonDisplayMode)parameter.Value;
                    break;
                case nameof(NullText):
                    NullText = (string)parameter.Value;
                    break;
                case nameof(InputName):
                    InputName = (string)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }
    public void gmSetAttributes(string key, object value)
    {
        if (this.dictAttributes is not null && key is not null && value is not null && this.dictAttributes.ContainsKey(key) == false)
        {
            this.dictAttributes.Add(key, value);
        }
    }
    public int gmBindValue => this.BindValue;
}

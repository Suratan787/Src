@using RichnessSoft.Entity.Model
@using RichnessSoft.Service
@using RichnessSoft.Component.Shared

@inject QueryData oQuery
<DxComboBox Data="@liData"
            ListRenderMode="ListRenderMode.Virtual"
            FilteringMode="DataGridFilteringMode.Contains"
            TextFieldName="@TextFieldName"
            @bind-Value="@BindValue"
            Attributes="@dictAttributes"
            AllowUserInput="false"
            NullText="@NullText"
            SizeMode="@WebConstUtil.Control.goComboboxSize"
            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            SelectedItemChanged="@SelectedItemChanged"
            ReadOnly="@IsViewOnly">
    <DxListEditorColumn FieldName="@nameof(Project.code)" Caption="@Lang.SysCode("รหัส","code")" Width="@DxGridHelper.Column.Width.Code" />
    <DxListEditorColumn FieldName="@(Lang.SysCode(nameof(Project.name1),nameof(Project.name2)))" Caption="@Lang.SysCode("ชื่อ","name1")" />
</DxComboBox>
@code {
    [Parameter]
    public Project BindValue { get; set; }
    [Parameter]
    public bool IsViewOnly { get; set; } = false;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public Action<Project> SelectedItemChanged { get; set; }
    [Parameter]
    public string TextFieldName { get; set; } = nameof(Project.code);
    [Parameter]
    public string InputName { get; set; } = "inputItemProjCode";
    [Parameter]
    public string NullText { get; set; } = "";

    Dictionary<string, object> dictAttributes;
    IEnumerable<Project> liData = Enumerable.Empty<Project>();

    protected override void OnInitialized()
    {
        dictAttributes = new Dictionary<string, object>();
        dictAttributes.Add("name1", InputName);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadDataSource();
        await InvokeAsync(StateHasChanged);
    }
    async Task LoadDataSource()
    {
        liData = oQuery.LoadProjListData();
        await InvokeAsync(StateHasChanged);
    }
    public void gmSetAttributes(string key, object value)
    {
        if (dictAttributes is null)
        {
            dictAttributes = new Dictionary<string, object>();
        }
        if (key is not null && value is not null && dictAttributes.ContainsKey(key) == false)
        {
            dictAttributes.Add(key, value);
        }
    }
    public Project gmGetDataRow(string strValue)
    {
        if (this.liData is null || this.liData.Count() <= 0) { return null; }
        return this.liData.FirstOrDefault(c => c.code == strValue) ?? null;
    }
    public Project gmGetRowDataById(int Id)
    {
        if (this.liData is null || this.liData.Count() == 0 || Id == 0) { return default; }
        return this.liData?.Where(c => c.id == Id)?.FirstOrDefault() ?? default;
    }
}

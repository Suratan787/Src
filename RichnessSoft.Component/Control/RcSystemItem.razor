@using RichnessSoft.Entity.Class
@using RichnessSoft.Component.Shared
<DxComboBox Data="@ConstUtil.goListSystem"
            ListRenderMode="ListRenderMode.Virtual"
            FilteringMode="DataGridFilteringMode.Contains"
            TextFieldName="@TextFieldName"
            @bind-Value="@BindValue"
            AllowUserInput="false"
            NullText="@NullText"
            Attributes="@dictAttributes"
            SizeMode="@WebConstUtil.Control.goComboboxSize"
            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
            ClearButtonDisplayMode="@ClearButtonDisplayMode"
            SelectedItemChanged="@((ConstUtilBase.cGLRefSystem row) => SelectedItemChanged(row,goData))"
            Enabled="@Enabled"
            ReadOnly="@IsViewOnly">
    @*<DxListEditorColumn FieldName="@nameof(ConstUtilBase.cGLRefSystem.Code)" Caption="@(Lang.SysCode("รหัส","Code"))" Width="@DxGridHelper.Column.Width.Code" />*@
    <DxListEditorColumn FieldName="@(Lang.SysCode(nameof(ConstUtilBase.cGLRefSystem.Name),nameof(ConstUtilBase.cGLRefSystem.name2)))" Caption="@(Lang.SysCode("ชื่อ","name1"))" />
</DxComboBox>

@code {
    [Parameter]
    public ConstUtilBase.cGLRefSystem  BindValue { get; set; }
    [Parameter]
    public bool IsViewOnly { get; set; } = false;
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public Action<ConstUtilBase.cGLRefSystem, object> SelectedItemChanged { get; set; }
    [Parameter]
    public string NullText { get; set; } = "";
    [Parameter]
    public string InputName { get; set; } = "inputItemRefSystem";
    [Parameter]
    public object goData { get; set; } = new object();
    [Parameter]
    public string TextFieldName { get; set; } = Lang.SysCode(nameof(ConstUtilBase.cGLRefSystem.Name), nameof(ConstUtilBase.cGLRefSystem.name2));
    [Parameter]
    public DevExpress.Blazor.DataEditorClearButtonDisplayMode ClearButtonDisplayMode { get; set; } = DevExpress.Blazor.DataEditorClearButtonDisplayMode.Never;

    Dictionary<string, object> dictAttributes;

    protected override void OnInitialized()
    {
        dictAttributes = new Dictionary<string, object>();
        dictAttributes.Add("name1", InputName);
    }
    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(BindValue):
                    BindValue = (ConstUtilBase.cGLRefSystem)parameter.Value;
                    break;
                case nameof(IsViewOnly):
                    IsViewOnly = (bool)parameter.Value;
                    break;
                case nameof(Enabled):
                    Enabled = (bool)parameter.Value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)parameter.Value;
                    break;
                case nameof(SelectedItemChanged):
                    SelectedItemChanged = (Action<ConstUtilBase.cGLRefSystem, object>)parameter.Value;
                    break;
                case nameof(NullText):
                    NullText = (string)parameter.Value;
                    break;
                case nameof(InputName):
                    InputName = (string)parameter.Value;
                    break;
                case nameof(goData):
                    goData = (object)parameter.Value;
                    break;
                case nameof(TextFieldName):
                    TextFieldName = (string)parameter.Value;
                    break;
                case nameof(ClearButtonDisplayMode):
                    ClearButtonDisplayMode = (DevExpress.Blazor.DataEditorClearButtonDisplayMode)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    public void gmSetAttributes(string key, object value)
    {
        if (dictAttributes is null)
        {
            dictAttributes = new Dictionary<string, object>();
        }
        if (dictAttributes is not null && key is not null && value is not null && dictAttributes.ContainsKey(key) == false)
        {
            dictAttributes.Add(key, value);
        }
    }
    public ConstUtilBase.cGLRefSystem gmGetDataRow(string strValue)
    {
        if (ConstUtil.goListSystem is null || ConstUtil.goListSystem.Count <= 0) { return null; }
        return ConstUtil.goListSystem?.FirstOrDefault(c => c.Code == strValue) ?? null;
    }
}

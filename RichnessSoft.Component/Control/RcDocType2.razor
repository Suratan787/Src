
@using RichnessSoft.Entity.Model
@using RichnessSoft.Service
@using RichnessSoft.Component.Shared
@inject QueryData oQuery
<DxComboBox Id="@ControlID"
            InputId="@ControlID"
            Data="@liData"
            ListRenderMode="ListRenderMode.Virtual"
            FilteringMode="DataGridFilteringMode.Contains"
            TextFieldName="@TextFieldName"
            ValueFieldName="@ValueFieldName"
            @bind-Value="@BindValue"
            AllowUserInput="false"
            NullText="@NullText"
            Attributes="@dictAttributes"
            SizeMode="@WebConstUtil.Control.goComboboxSize"
            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
            ClearButtonDisplayMode="@ClearButtonDisplayMode"
            SelectedItemChanged="@SelectedItemChanged"
            Enabled="@Enabled"
            ReadOnly="@IsViewOnly">
    @if (ShowMultiColumn)
    {
        <DxListEditorColumn FieldName="@nameof(DocType.code)" Caption="@(Lang.SysCode("รหัส", "code"))" Width="@DxGridHelper.Column.Width.Code" />
        <DxListEditorColumn FieldName="@(Lang.SysCode(nameof(DocType.name1), nameof(DocType.name2)))" Caption="@(Lang.SysCode("ชื่อ", "name1"))" />
    }
</DxComboBox>

@code {
    [Parameter]
    public string ControlID { get; set; } = "inputIDDocType";
    [Parameter]
    public string BindValue { get; set; }
    [Parameter]
    public bool IsViewOnly { get; set; } = false;
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public Action<DocType> SelectedItemChanged { get; set; }
    [Parameter]
    public string NullText { get; set; } = "";
    [Parameter]
    public string InputName { get; set; } = "inputNameDocType";
    [Parameter]
    public string TextFieldName { get; set; } = nameof(DocType.ExpFullName); //Lang.SysCode(nameof(doctype.name1), nameof(doctype.name2));
    [Parameter]
    public string ValueFieldName { get; set; } = nameof(DocType.code);
    [Parameter]
    public string[] aSystemType { get; set; }
    [Parameter]
    public string[] aDocGroup { get; set; }
    [Parameter]
    public string[] aDocCode { get; set; }
    [Parameter]
    public bool ShowMultiColumn { get; set; } = true;
    [Parameter]
    public DevExpress.Blazor.DataEditorClearButtonDisplayMode ClearButtonDisplayMode { get; set; } = DevExpress.Blazor.DataEditorClearButtonDisplayMode.Auto;


    private Dictionary<string, object> dictAttributes;
    private IEnumerable<DocType> liData = Enumerable.Empty<DocType>();
    protected override void OnInitialized()
    {
        dictAttributes = new Dictionary<string, object>();
        dictAttributes.Add("name1", InputName);
    }
    protected override async Task OnInitializedAsync()
    {
        LoadDataDataSource();
        await InvokeAsync(StateHasChanged);
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(ControlID):
                    ControlID = (string)parameter.Value;
                    break;
                case nameof(BindValue):
                    BindValue = (string)parameter.Value;
                    break;
                case nameof(IsViewOnly):
                    IsViewOnly = (bool)parameter.Value;
                    break;
                case nameof(Enabled):
                    Enabled = (bool)parameter.Value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)parameter.Value;
                    break;
                case nameof(SelectedItemChanged):
                    SelectedItemChanged = (Action<DocType>)parameter.Value;
                    break;
                case nameof(NullText):
                    NullText = (string)parameter.Value;
                    break;
                case nameof(InputName):
                    InputName = (string)parameter.Value;
                    break;
                case nameof(TextFieldName):
                    TextFieldName = (string)parameter.Value;
                    break;
                case nameof(ValueFieldName):
                    ValueFieldName = (string)parameter.Value;
                    break;
                case nameof(aSystemType):
                    aSystemType = (string[])parameter.Value;
                    break;
                case nameof(aDocGroup):
                    aDocGroup = (string[])parameter.Value;
                    break;
                case nameof(aDocCode):
                    aDocCode = (string[])parameter.Value;
                    break;
                case nameof(ShowMultiColumn):
                    ShowMultiColumn = (bool)parameter.Value;
                    break;
                case nameof(ClearButtonDisplayMode):
                    ClearButtonDisplayMode = (DevExpress.Blazor.DataEditorClearButtonDisplayMode)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    void LoadDataDataSource()
    {
        this.liData = oQuery.LoadDocTypeListData2(this.aSystemType, this.aDocGroup,aDocCode) ?? Enumerable.Empty<DocType>();
    }
    public void gmSetAttributes(string key, object value)
    {
        if (dictAttributes is not null && key is not null && value is not null && dictAttributes.ContainsKey(key) == false)
        {
            dictAttributes.Add(key, value);
        }
    }
    public enum enumCondition { SystemType = 1, DocGroup = 2, Formula = 3 };
    public void gmSetCondition(enumCondition enumCondition, string[] aValue)
    {
        switch (enumCondition)
        {
            case enumCondition.SystemType:
                this.aSystemType = aValue ?? null;
                break;
            case enumCondition.DocGroup:
                this.aDocGroup = aValue ?? null;
                break;
            case enumCondition.Formula:
                this.aDocCode = aValue ?? null;
                break;
            default:
                break;
        }
        this.gmRefreshDataSource();
    }
    public void gmRefreshDataSource() => LoadDataDataSource();

    public DocType gmGetDataRow( string strValue)
    {
        if (this.liData is null || this.liData.Count() <= 0) { return null; }
         return this.liData.FirstOrDefault(c => c.code == strValue) ?? null;
    }
    public DocType gmGetDataRow(int index = 0)
    {
        if (liData is null || liData.Count() <= index) { return null; }
        return liData.ElementAt(index) ?? null;
    }
    public int gmRowCount => this.liData?.Count() ?? 0;
    public IEnumerable<DocType> gmGetAllRowData => this.liData;
}

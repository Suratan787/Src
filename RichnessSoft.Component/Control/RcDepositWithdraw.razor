@* Deposit/Withdraw : รายการฝาก/ถอน *@
@* กรณีเพิ่ม Parameter ต้องกำหนด SetParametersAsync เสมอ มันเกี่ยวกับเรื่อง Performance *@
@using RichnessSoft.Entity.Class
@using RichnessSoft.Component.Shared
<DxComboBox Id="@ControlID"
            InputId="@ControlID"
            Data="@liData"
            ListRenderMode="ListRenderMode.Virtual"
            FilteringMode="DataGridFilteringMode.Contains"
            TextFieldName="@TextFieldName"
            ValueFieldName="@ValueFieldName"
            @bind-Value="@BindValue"
            Attributes="@dictAttributes"
            AllowUserInput="false"
            NullText="@NullText"
            SizeMode="@WebConstUtil.Control.goComboboxSize"
            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth"
            ClearButtonDisplayMode="@ClearButtonDisplayMode"
            SelectedItemChanged="@SelectedItemChanged"
            Enabled="@Enabled"
            ReadOnly="@IsViewOnly">
    @if (ShowMultiColumn)
    {
        <DxListEditorColumn FieldName="@nameof(ConstUtilBase.cDepositWithdraw.Code)" Caption="@(Lang.SysCode("รหัส","code"))" Width="@DxGridHelper.Column.Width.Code" />
        <DxListEditorColumn FieldName="@(Lang.SysCode(nameof(ConstUtilBase.cDepositWithdraw.Name), nameof(ConstUtilBase.cDepositWithdraw.name2)))" Caption="@(Lang.SysCode("รหัส","name1"))" />
    }
</DxComboBox>
@code {
    [Parameter]
    public string ControlID { get; set; } = "cbxDW";
    [Parameter]
    public string BindValue { get; set; }
    [Parameter]
    public bool IsViewOnly { get; set; } = false;
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public Action<ConstUtilBase.cDepositWithdraw> SelectedItemChanged { get; set; }
    [Parameter]
    public string TextFieldName { get; set; } = Lang.SysCode(nameof(ConstUtilBase.cDepositWithdraw.Name), nameof(ConstUtilBase.cDepositWithdraw.name2));
    [Parameter]
    public string ValueFieldName { get; set; } = nameof(ConstUtilBase.cDepositWithdraw.Code);
    [Parameter]
    public string NullText { get; set; } = "";
    [Parameter]
    public string InputName { get; set; } = "inputDW";
    [Parameter]
    public bool ShowMultiColumn { get; set; } = false;
    [Parameter]
    public DevExpress.Blazor.DataEditorClearButtonDisplayMode ClearButtonDisplayMode { get; set; } = DevExpress.Blazor.DataEditorClearButtonDisplayMode.Never;

    Dictionary<string, object> dictAttributes;
    private IEnumerable<ConstUtilBase.cDepositWithdraw> liData { get; set; } = Enumerable.Empty<ConstUtilBase.cDepositWithdraw>();
    protected override void OnInitialized()
    {
        dictAttributes = new Dictionary<string, object>();
        dictAttributes.Add("name1", InputName);
    }
    protected override async Task OnInitializedAsync()
    {
        this.LoadDataSource();
        await InvokeAsync(StateHasChanged);
    }
    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(ControlID):
                    ControlID = (string)parameter.Value;
                    break;
                case nameof(BindValue):
                    BindValue = (string)parameter.Value;
                    break;
                case nameof(IsViewOnly):
                    IsViewOnly = (bool)parameter.Value;
                    break;
                case nameof(Enabled):
                    Enabled = (bool)parameter.Value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)parameter.Value;
                    break;
                case nameof(SelectedItemChanged):
                    SelectedItemChanged = (Action<ConstUtilBase.cDepositWithdraw>)parameter.Value;
                    break;
                case nameof(TextFieldName):
                    TextFieldName = (string)parameter.Value;
                    break;
                case nameof(ValueFieldName):
                    ValueFieldName = (string)parameter.Value;
                    break;
                case nameof(NullText):
                    NullText = (string)parameter.Value;
                    break;
                case nameof(InputName):
                    InputName = (string)parameter.Value;
                    break;
                case nameof(ShowMultiColumn):
                    ShowMultiColumn = (bool)parameter.Value;
                    break;
                case nameof(ClearButtonDisplayMode):
                    ClearButtonDisplayMode = (DevExpress.Blazor.DataEditorClearButtonDisplayMode)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    private void LoadDataSource()
    {
        liData = ConstUtil.goListDepositWithdraw ?? Enumerable.Empty<ConstUtilBase.cDepositWithdraw>();
    }
    public void gmSetAttributes(string key, object value)
    {
        if (this.dictAttributes is null)
        {
            this.dictAttributes = new Dictionary<string, object>();
        }
        if (this.dictAttributes is not null && key is not null && value is not null && this.dictAttributes.ContainsKey(key) == false)
        {
            this.dictAttributes.Add(key, value);
        }
    }
    public void gmSetEnable(bool Enabled = true)
    {
        this.Enabled = Enabled;
        StateHasChanged();
    }
    public void gmSetReadOnly(bool ReadOnly = false)
    {
        this.IsViewOnly = ReadOnly;
        StateHasChanged();
    }
    public int gmRowCount => liData?.Count() ?? 0;
    public ConstUtilBase.cDepositWithdraw gmGetRowData(int index = 0)
    {
        if (liData is null || liData.Count() <= index) { return null; }
        return liData.ElementAt(index) ?? null;
    }
    public ConstUtilBase.cDepositWithdraw gmGetRowData(string strCode)
    {
        if (liData is null || liData.Count() == 0) { return null; }
        return liData.Where(c => c.Code == strCode)?.FirstOrDefault() ?? null;
    }
}

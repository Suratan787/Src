// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RichnessSoft.Entity.Context;

#nullable disable

namespace RichnessSoft.Entity.Migrations
{
    [DbContext(typeof(RicnessDbContext))]
    [Migration("20221004155348_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccBook", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("accbook", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Acchart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("group")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("date");

                    b.Property<int>("isfixed")
                        .HasColumnType("integer");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("tag")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("tag2")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("acchart", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRole", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("acchart_code")
                        .HasColumnType("text");

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sysvariable")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("accrole", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRoleTemplateD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer");

                    b.Property<string>("accrolecode")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("accroledesc")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("accroledesc2")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("accroletemplatehid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("acchartid");

                    b.HasIndex("accroletemplatehid");

                    b.ToTable("accroletemplated", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRoleTemplateH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("accroletemplateh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("addresstype")
                        .HasColumnType("integer");

                    b.Property<string>("amplurcode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("amplurname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("amplurname2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("building")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("building2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("cipcode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("countrycode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("countryname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("countryname2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("floor")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("moo")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("no")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("provincecode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("provincename")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("provincename2")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("refid")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("reftype")
                        .HasColumnType("integer");

                    b.Property<string>("road")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("road2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("room")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("soi")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("soi2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("tambolcode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("tambolname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("tambolname2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("taxpayer")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("taxrepbranchname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("taxrepbranchno")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("taxrepfirstname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxrepfirstname2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxreplastname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxreplastname2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxrepmidname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxrepmidname2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxrepname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("taxrepname2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("taxrepprefix")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("taxrepsname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("taxreptaxid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("taxtepsname2")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("village")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("village2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("yaek")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("zipcode")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Asset", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer");

                    b.Property<decimal>("amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("มูลค่าที่ใช้ในการคำนวณ");

                    b.Property<decimal>("amountdepreciat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("มูลค่าค่าเสื่อมสะสม");

                    b.Property<int?>("assetgroupid")
                        .HasColumnType("integer");

                    b.Property<int?>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("brand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("")
                        .HasComment("ยี่ห้อ");

                    b.Property<DateTime>("buydate")
                        .HasColumnType("date")
                        .HasComment("วันที่ซื้อ");

                    b.Property<string>("buyinv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่บิลซื้อ");

                    b.Property<decimal>("buyprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("ราคาซื้อ");

                    b.Property<string>("buyvoucher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("Payment Voucher");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("customer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("")
                        .HasComment("ขายให้");

                    b.Property<string>("deduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasComment("หัก มูลค่าซาก YES = ต้องการหัก , NO = ไม่ต้องการหัก ");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<int?>("depreciateacchartid")
                        .HasColumnType("integer");

                    b.Property<int?>("depreciatesumacchartid")
                        .HasColumnType("integer");

                    b.Property<string>("generate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("ต้องการคำนวณค่าเสื่อม YES = ต้องการคำนวณ, NO = ไม่ต้องการคำนวณ");

                    b.Property<string>("identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("เป็นสินทรัพย์มีตัวตัว");

                    b.Property<string>("insurancecomp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("")
                        .HasComment("บริษัทประกันภัย");

                    b.Property<string>("insuranceno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่กรมธรรน์");

                    b.Property<string>("method")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("S")
                        .HasComment("วิธีการคำนวณ S = เส้นตรง (Straight line) , D = ลดน้อยถอยลง (DDB)");

                    b.Property<decimal>("miscellaneousexpense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("ค่าใช้จ่ายเบ็ดเตล็ด");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<decimal>("rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("% อัตราคาเสื่อม");

                    b.Property<decimal>("rate2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("% อัตรา ณ วันที่ได้มา");

                    b.Property<string>("rateper")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("0")
                        .HasComment("อัตราต่อ M = เดือน , Y = ปี ");

                    b.Property<string>("remark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่กรมธรรน์");

                    b.Property<DateTime>("saledate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("วันที่ขายไป");

                    b.Property<string>("saleinv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่บิลขาย");

                    b.Property<string>("salevoucher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("Receipt Voucher");

                    b.Property<decimal>("salvage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("ค่าซาก");

                    b.Property<string>("serial")
                        .HasColumnType("text");

                    b.Property<string>("series")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("")
                        .HasComment("รุ่น");

                    b.Property<decimal>("setupexpense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("ค่าใช้จ่ายในการติดตั้ง");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("date")
                        .HasComment("วันที่เริ่มคำนวณ");

                    b.Property<DateTime>("stopdate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("วันที่หยุดคำนวณ");

                    b.Property<decimal>("totalprice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("รวมราคาซื้อหรือได้มา");

                    b.Property<decimal>("transportexpense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("ค่าใช้จ่ายในการขนส่ง");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("usefullife")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasComment("อายุการใช้งาน");

                    b.Property<string>("vendor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("")
                        .HasComment("ซื้อจาก");

                    b.Property<string>("voucherrecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("บันทึกบัญชีทุกๆ M = เดือน , Y = ปี ");

                    b.Property<string>("warrantyno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("")
                        .HasComment("หมายเลขประกัน");

                    b.HasKey("id");

                    b.HasIndex("acchartid");

                    b.HasIndex("assetgroupid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AssetGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("DepreciateSumacchartid")
                        .HasColumnType("integer");

                    b.Property<int?>("Depreciateacchartid")
                        .HasColumnType("integer");

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("acchartid");

                    b.HasIndex("companyid");

                    b.ToTable("assetgroup", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Bank", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("botcode")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("swicfcode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("bank", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BankBranch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<int?>("bankid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("bankid");

                    b.HasIndex("companyid");

                    b.ToTable("bankbranch", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("amount")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("billtrnhid")
                        .HasColumnType("integer");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("depositamt")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<int>("partialtype")
                        .HasColumnType("integer");

                    b.Property<string>("payamt")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("receipttrnhid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("refinvoicedocgroup")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("refinvoicedoctype")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("refinvoicelinkid")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<string>("whtamt")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("billtrnhid");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("billtrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("addressofficedetail")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("addressofficeid")
                        .HasColumnType("integer");

                    b.Property<string>("attach_file_01")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_02")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_03")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_04")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_05")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("cancellationreason")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("contactname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("contactname2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("contacttel")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("creditterm")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<decimal>("currencyrate")
                        .HasColumnType("numeric(18,6)");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<string>("custsuppbranchcode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("custsupptaxid")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("doccode")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docrefnumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("footcurramt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrdiscamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrnetamt")
                        .HasColumnType("numeric");

                    b.Property<decimal>("footcurrpayamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrwithholdingtaxamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("footdiscstr")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("footstdamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstddiscamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdnetamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdpayamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdwithholdingtaxamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("foottotalqty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("islocked")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("paydate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark02")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark03")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark04")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark05")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark06")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark07")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark08")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark09")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("text");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("vattype")
                        .HasColumnType("text");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("billtrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnRef", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("DocType")
                        .HasColumnType("integer");

                    b.Property<int?>("InvTrnDId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiptTrnDId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiptTrnHId")
                        .HasColumnType("integer");

                    b.Property<decimal>("bfcurrvatamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("bfstdvatamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("invtrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("itemreftype")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<decimal>("rate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<decimal>("vatcurramount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("vatstdamount")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.ToTable("billtrnref", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Bilpay", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("gltrnhid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("masterid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("paymentid")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.ToTable("bilpay", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("accbookid")
                        .HasColumnType("integer");

                    b.Property<string>("accremarkdetail")
                        .HasColumnType("text")
                        .HasComment("หมายเหตุการลงลัญชี");

                    b.Property<int?>("accroletemplatehid")
                        .HasColumnType("integer");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<int?>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("docformatrunno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasComment("รูปแบบการ Running เอกสาร");

                    b.Property<int>("doclenrunno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("จำนวนหลักในการ Running");

                    b.Property<int>("docstartrunno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("เลขที่เริ่มต้น");

                    b.Property<string>("doctype")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("lockdate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Lock ข้อมูลห้ามแก้ไข ถึงวันที่");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("prefixrunno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasComment("ขึ้นต้น");

                    b.Property<int>("sectionid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vattype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasComment("ประเภทภาษี ");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.Property<string>("yearrunno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasComment("รูปแบบปี ");

                    b.HasKey("id");

                    b.HasIndex("accbookid");

                    b.HasIndex("accroletemplatehid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BookBank", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer")
                        .HasComment("ผังบัญชี");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<decimal>("balanceamount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("จำนวนเงินฝาก");

                    b.Property<int?>("bankbranchid")
                        .HasColumnType("integer");

                    b.Property<int?>("bankid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("blancedate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Balance date");

                    b.Property<string>("bookbanktype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("")
                        .HasComment("ประเภทสมุดบัญชี");

                    b.Property<string>("bookno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่สมุดบัญชีธนาคาร");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("depositbookid")
                        .HasColumnType("integer")
                        .HasComment("เล่มบันทึกใบนำฝาก");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("opendate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("paymentcqacchartid")
                        .HasColumnType("integer")
                        .HasComment("บัญชีเช็คจ่าย");

                    b.Property<int?>("recivecqacchartid")
                        .HasColumnType("integer")
                        .HasComment("บัญชีเช็ครับ");

                    b.Property<int?>("revertcqacchartid")
                        .HasColumnType("integer")
                        .HasComment("กลับรายการเช็คจ่าย");

                    b.Property<string>("sname1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อย่อ 2");

                    b.Property<string>("sname2")
                        .HasColumnType("text");

                    b.Property<int?>("trandferacchartid")
                        .HasColumnType("integer")
                        .HasComment("บัญชีโอนเงินระหว่างสมุด");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("acchartid");

                    b.HasIndex("bankbranchid");

                    b.HasIndex("bankid");

                    b.HasIndex("companyid");

                    b.ToTable("bookbank", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Branch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("addr1")
                        .HasColumnType("text");

                    b.Property<string>("addr2")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("fax")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("is_headbrn")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("tel")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("branch", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Brand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Color", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("building")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("building2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("countryid")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("disrictid")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("fax")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("floor")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("houseno")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lane")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("lane2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("moo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("onwername")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("postalid")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("provinceid")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("registerno")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("road")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("road2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("room")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("subdisrictid")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("taxid")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("tel")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("tel2")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("village")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("village2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("website")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("yaek")
                        .HasColumnType("varchar(10)");

                    b.HasKey("id");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("companyname")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("contactname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("contacttype")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("mobile")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("positionname")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("refid")
                        .HasColumnType("text");

                    b.Property<int>("reftype")
                        .HasColumnType("integer");

                    b.Property<string>("remark")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("seq")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("tel")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Currency", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("countrycode")
                        .HasColumnType("text");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("ratio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.CustGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("levelprice")
                        .HasColumnType("integer");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("acchartid");

                    b.HasIndex("companyid");

                    b.ToTable("custgroup", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Remark2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 2");

                    b.Property<string>("Remark4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 4");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("bankbranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("สาขา");

                    b.Property<int?>("bankid")
                        .HasColumnType("integer")
                        .HasComment("ธนาคาร");

                    b.Property<string>("billingcond")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasComment("เงื่อนไขการวางบิล");

                    b.Property<string>("bookbankname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อที่บัญชีธนาคาร");

                    b.Property<string>("bookbankno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(15)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่บัญชีธนาคาร");

                    b.Property<string>("branchcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("")
                        .HasComment("รหัสสาขา");

                    b.Property<string>("branchname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อสาขา");

                    b.Property<string>("bussinesstype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasComment("ประเภทธุรกิจ");

                    b.Property<string>("cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("สำนักงานใหญ่");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("creditamt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("วงเงินเครดิต");

                    b.Property<decimal>("creditdays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasDefaultValue(0m)
                        .HasComment("จำนวนวันเครดิต");

                    b.Property<decimal>("creditdaysbilling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasDefaultValue(0m)
                        .HasComment("จำนวนวันเครดิต(วางบิล)");

                    b.Property<string>("currencyid")
                        .HasColumnType("text")
                        .HasComment("หน่วยเงิน");

                    b.Property<int?>("custgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("custtype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("I")
                        .HasComment("I = บุคคลธรรมดา C = นิติบุคคล");

                    b.Property<string>("discountendbill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("")
                        .HasComment("ส่วนลดท้ายบิล");

                    b.Property<string>("discountitem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("")
                        .HasComment("ส่วนลดที่รายการสินเค้า");

                    b.Property<string>("fax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("โทรสาร");

                    b.Property<string>("firstname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อ");

                    b.Property<string>("firstname2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อ");

                    b.Property<string>("headoffice")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("lastname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("นามสกุล");

                    b.Property<string>("lastname2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("นามสกุล");

                    b.Property<int?>("membergroupid")
                        .HasColumnType("integer");

                    b.Property<int?>("memberpriceid")
                        .HasColumnType("integer")
                        .HasComment("ราคาสมาชิกประเภท");

                    b.Property<string>("midname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อกลาง่");

                    b.Property<string>("midname2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อกลาง่");

                    b.Property<string>("mopid")
                        .HasColumnType("text")
                        .HasComment("วิธีการชำระเงิน");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("prename")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("คำนำนหน้า");

                    b.Property<string>("promotioncode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("โปรโมชั่น");

                    b.Property<int?>("receivableacchartid")
                        .HasColumnType("integer")
                        .HasComment("รหัสบัญชีลูกหนี้การค้า");

                    b.Property<string>("receivingdatecond")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasComment("เงื่อนไขวันเก็บเงิน");

                    b.Property<string>("remark1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 1");

                    b.Property<string>("remark10")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 10");

                    b.Property<string>("remark3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 3");

                    b.Property<string>("remark5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 5");

                    b.Property<string>("remark6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 6");

                    b.Property<string>("remark7")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 7");

                    b.Property<string>("remark8")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 8");

                    b.Property<string>("remark9")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("หมายเหตุ 9");

                    b.Property<int?>("saleareaid")
                        .HasColumnType("integer");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("saleteamid")
                        .HasColumnType("integer");

                    b.Property<int?>("segmentationid")
                        .HasColumnType("integer");

                    b.Property<string>("shippingby")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(25)")
                        .HasDefaultValue("")
                        .HasComment("จัดส่งโดย");

                    b.Property<string>("singlelineaddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("ที่อยู่บรรทัดเดียว");

                    b.Property<string>("singlelineaddress2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("ที่อยู่บรรทัดเดียว 2");

                    b.Property<string>("sname1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อย่อลูกค้า");

                    b.Property<string>("sname2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("")
                        .HasComment("ชื่อย่อลูกค้า2");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("")
                        .HasComment("สถานะลูกค้า");

                    b.Property<string>("taxid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(25)")
                        .HasDefaultValue("")
                        .HasComment("เลขที่ผู้เสียภาษี");

                    b.Property<string>("tel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("เบอร์โทรศัพท์");

                    b.Property<string>("teletax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("เบอร์โทรส่ง e-tax");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("O")
                        .HasComment("แยกนอก/รวมใน");

                    b.Property<decimal>("vatrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("อัตราภาษี");

                    b.Property<string>("vattype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("ประเภทภาษี");

                    b.Property<string>("website")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasComment("เว็บไซต์");

                    b.HasKey("id");

                    b.HasIndex("bankid");

                    b.HasIndex("companyid");

                    b.HasIndex("custgroupid");

                    b.HasIndex("membergroupid");

                    b.HasIndex("receivableacchartid");

                    b.HasIndex("saleareaid");

                    b.HasIndex("salemanid");

                    b.HasIndex("saleteamid");

                    b.HasIndex("segmentationid");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.CustomerCredit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("CreditType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasComment("ประเภทเครดิต I = วงเงินเครดิตเพิ่ม , R = วงเงินเครดิตลด");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนเงิน");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("customerid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("reftype")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("seq")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("`ลำดับ");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("customecredit", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer")
                        .HasComment("ฝ่ายงาน");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("sectionid");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Descriptions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("desc")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("desc2")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("dtype")
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("description", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Design", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("design", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.DocLink", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("MasterItemLinkId")
                        .HasColumnType("integer");

                    b.Property<int?>("MasterLinkId")
                        .HasColumnType("integer");

                    b.Property<int?>("MasterType")
                        .HasColumnType("integer");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("childitemlinkid")
                        .HasColumnType("integer");

                    b.Property<int>("childlinkid")
                        .HasColumnType("integer");

                    b.Property<int>("childtype")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<decimal>("qty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("seq")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.ToTable("doclink", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.DocType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("cash")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("doc_group")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("menu")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("service")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("system")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("tax_refund")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vat")
                        .HasColumnType("varchar(10)");

                    b.HasKey("id");

                    b.ToTable("doctype", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Erp_Log", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("data_new")
                        .HasColumnType("text");

                    b.Property<string>("data_old")
                        .HasColumnType("text");

                    b.Property<DateTime>("doc_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("doc_no")
                        .HasColumnType("text");

                    b.Property<DateTime>("logdatetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("logtype")
                        .HasColumnType("text");

                    b.Property<DateTime>("old_doc_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("old_doc_no")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("user_code")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("erp_log", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Format", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("format", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.FormMaster", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("formmaster", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.FromRef", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("formtype")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reffromcode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reffromtable")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("fromref", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.GLTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("accbookid")
                        .HasColumnType("integer");

                    b.Property<int>("acchartid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("creditamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("debitamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("detail01")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("detail02")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("detail03")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("detail04")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("detail05")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<int>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("group")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("accbookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.ToTable("gltrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.GLTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("accbookid")
                        .HasColumnType("integer");

                    b.Property<string>("approvedby")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("approveddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("bookkeeping")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("creditamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("debitamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("detail01")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("detail02")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("detail03")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("detail04")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("detail05")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("doccode")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("freqacct")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("islock")
                        .HasColumnType("varchar(2)");

                    b.Property<int>("plansld")
                        .HasColumnType("integer");

                    b.Property<int>("projectid")
                        .HasColumnType("integer");

                    b.Property<int>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("source")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("status")
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("accbookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.ToTable("gltrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Grade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("grade", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.InvTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Contactid")
                        .HasColumnType("integer");

                    b.Property<string>("ProdType")
                        .HasColumnType("varchar(25)")
                        .HasComment("ประเภทสินค้า");

                    b.Property<string>("Refund")
                        .HasColumnType("varchar(1)")
                        .HasComment("Y = คืน , N = ไม่คืน");

                    b.Property<int?>("SaleManid")
                        .HasColumnType("integer");

                    b.Property<string>("Seq")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasComment("ลำดับรายการ");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Before VAT amount + จำนวนภาษี");

                    b.Property<decimal>("amountk")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวน(qty) x ราคาต่อหน่วย(pricek) - ส่วนลด(DiscAmtK)");

                    b.Property<decimal>("backqty")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนตัดคงเหลือ");

                    b.Property<decimal>("bfvatamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวน(qty) x ราคาต่อหน่วย(price) - ส่วนลด(discamt)");

                    b.Property<decimal>("bfvatamountk")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวน(qty) x ราคาต่อหน่วย(price) - ส่วนลด(discamt)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("calflag")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<decimal>("costadj")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าต้นทุนเพิ่มเติม");

                    b.Property<decimal>("costamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าต้นทุน");

                    b.Property<decimal>("costavg")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าต้นทุนเฉลี่ย");

                    b.Property<decimal>("costfifo")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าต้นทุน FIFO");

                    b.Property<decimal>("costlot")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าต้นทุน lot");

                    b.Property<decimal>("coststd")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าต้นทุน Std.");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<decimal>("discamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าส่วนลด");

                    b.Property<decimal>("discamountk")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าส่วนลด(คีย์)");

                    b.Property<string>("discstr")
                        .HasColumnType("varchar(25)")
                        .HasComment("ส่วนลด(คีย์)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("docdeliverydate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(4)")
                        .HasComment("สถานะ");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasComment("ประเภทเอกสาร");

                    b.Property<DateTime?>("expdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer")
                        .HasComment("บัญชีรายวัน");

                    b.Property<string>("inouttype")
                        .HasColumnType("varchar(1)")
                        .HasComment("นำเข้า/ส่งออก");

                    b.Property<int?>("invtrnhid")
                        .HasColumnType("integer")
                        .HasComment("เลขที่ใบแจ้งหนี้ส่วนหัวเอกสาร");

                    b.Property<string>("lot")
                        .HasColumnType("varchar(30)")
                        .HasComment("ฉลาก");

                    b.Property<DateTime?>("mfgdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("paycurramt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าชำระ");

                    b.Property<decimal>("paystdamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าชำระ");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("ราคา");

                    b.Property<decimal>("pricek")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("ราคา(คีย์)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("pstype")
                        .HasColumnType("varchar(25)")
                        .HasComment("(P)สินค้า/(S)ชุดสินค้า");

                    b.Property<decimal>("qty")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวน");

                    b.Property<decimal>("qtystd")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนมาตรฐาน");

                    b.Property<int>("refdocdid")
                        .HasColumnType("integer");

                    b.Property<int>("refdochid")
                        .HasColumnType("integer");

                    b.Property<decimal>("refdocqtyofcut")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("จำนวนที่ดึงมาตัดในเอกสารใบนี้");

                    b.Property<string>("refdoctype")
                        .HasColumnType("text");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 01");

                    b.Property<string>("remark02")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 02");

                    b.Property<string>("remark03")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 03");

                    b.Property<string>("remark04")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 04");

                    b.Property<string>("remark05")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 05");

                    b.Property<string>("remark06")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 06");

                    b.Property<string>("remark07")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 07");

                    b.Property<string>("remark08")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 08");

                    b.Property<string>("remark09")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 09");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(255)")
                        .HasComment("Item remark 10");

                    b.Property<string>("rootseq")
                        .HasColumnType("varchar(2)")
                        .HasComment("ลำดับชั้นชุดสินค้า");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("setparent")
                        .HasColumnType("varchar(25)")
                        .HasComment("ชุดสินค้าตัวคุมสินค้า");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<int>("umstdid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<decimal>("vatamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนภาษี");

                    b.Property<decimal>("vatamountk")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนภาษี(คีย์)");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)")
                        .HasComment("แยกนอก/รวมใน");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("อัตตราภาษี");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(1)")
                        .HasComment("ประเภทภาษี");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.Property<decimal>("xrate")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("อัตราแปลงหน่วย");

                    b.HasKey("id");

                    b.HasIndex("Contactid");

                    b.HasIndex("SaleManid");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("invtrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("productid");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.HasIndex("warehouseid");

                    b.ToTable("invtrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.InvTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("CreditTerm")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("เครดิตเทอม");

                    b.Property<string>("IsRetProduct")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("ต้องการคืนสินค้า / ลดจำนวนเงินไม่คืนสินค้า");

                    b.Property<string>("RetProductReason")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("สาเหตุการคืนสินค้า");

                    b.Property<string>("addressdeliverydetail")
                        .HasColumnType("varchar(1)")
                        .HasComment("ที่อยู่ส่งของ");

                    b.Property<int>("addressdeliveryid")
                        .HasColumnType("integer");

                    b.Property<string>("addressofficedetail")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasComment("ที่อยู่ทำงาน");

                    b.Property<string>("addressofficeid")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("ที่อยู่ทำงาน");

                    b.Property<string>("approvedby")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("ผู้อนุมัติเอกสาร");

                    b.Property<DateTime?>("approveddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("attach_file_01")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("เก็บเฉพาะชื่อไฟล์เท่านั้น");

                    b.Property<string>("attach_file_02")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("เก็บเฉพาะชื่อไฟล์เท่านั้น");

                    b.Property<string>("attach_file_03")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("เก็บเฉพาะชื่อไฟล์เท่านั้น");

                    b.Property<string>("attach_file_04")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("เก็บเฉพาะชื่อไฟล์เท่านั้น");

                    b.Property<string>("attach_file_05")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("เก็บเฉพาะชื่อไฟล์เท่านั้น");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("contacttel")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("เบอร์โทรผู้ติดต่อ");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<decimal>("currencyrate")
                        .HasColumnType("numeric");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<string>("custsuppbranchcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("สาขา ลูกค้า/ผู้จำหน่าย");

                    b.Property<string>("custsupptax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(25)")
                        .HasDefaultValue("Y")
                        .HasComment("เลขประจำตัวผู้เสียภาษี ลูกค้า/ผู้จำหน่าย");

                    b.Property<string>("deliverycode")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("เลขที่ใบส่งสินค้า");

                    b.Property<int>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("doccode")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("เลขที่เอกสารภายใน");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("docdelidate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("docduedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docrefnumber")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasComment("เลขที่เอกสาร");

                    b.Property<string>("docstatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(4)")
                        .HasDefaultValue("Y")
                        .HasComment("สถานะ");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)")
                        .HasComment("ประเภทเอกสาร");

                    b.Property<DateTime?>("docvatdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("footcurrafdepositamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าหลัง หัก เงินมัดจำ");

                    b.Property<decimal>("footcurrafdiscamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าหลังหักส่วนลด");

                    b.Property<decimal>("footcurramt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้า");

                    b.Property<decimal>("footcurrbfvatamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้าก่อนภาษี");

                    b.Property<decimal>("footcurrdisamtitem")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าส่วนลด(Currency)");

                    b.Property<decimal>("footcurrdiscamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("ส่วนลดท้ายบิล");

                    b.Property<string>("footcurrdiscstr")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasComment("ส่วนลดท้ายบิล");

                    b.Property<decimal>("footcurrnetamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสุทธิ(Currency)");

                    b.Property<decimal>("footcurrpayamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนเงินที่จ่าย(Currency)");

                    b.Property<decimal>("footcurrvatamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าภาษี");

                    b.Property<decimal>("footcurrwithouttaxamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้าไม่มีภาษี");

                    b.Property<decimal>("footcurrwithtaxamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้ามีภาษี");

                    b.Property<decimal>("footdepositamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าเงินมัดจำ");

                    b.Property<decimal>("footstdafdepositamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าหลัง หัก เงินมัดจำ");

                    b.Property<decimal>("footstdafdiscamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าหลังหักส่วนลด");

                    b.Property<decimal>("footstdamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้า");

                    b.Property<decimal>("footstdbfvatamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้าก่อนภาษี");

                    b.Property<decimal>("footstddisamtitem")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าส่วนลด(Standard)");

                    b.Property<decimal>("footstddiscamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("ส่วนลดท้ายบิล");

                    b.Property<decimal>("footstdnetamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสุทธิ(Standard)");

                    b.Property<decimal>("footstdpayamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("จำนวนเงินที่จ่าย(Standard)");

                    b.Property<decimal>("footstdvatamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าภาษี");

                    b.Property<decimal>("footstdwithouttaxamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้าไม่มีภาษี");

                    b.Property<decimal>("footstdwithtaxamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("มูลค่าสินค้ามีภาษี");

                    b.Property<decimal>("foottotalqty")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("จำนวนสินค้าทั้งหมด");

                    b.Property<decimal>("footwithholdingtaxamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("ภาษีหัก ณ ที่จ่าย");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("islocked")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("ล็อครายการ");

                    b.Property<int>("plansld")
                        .HasColumnType("integer");

                    b.Property<int>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("purchasecode")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("เลขที่สั่งซื้อ");

                    b.Property<DateTime?>("purchasedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("remark01")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 01");

                    b.Property<string>("remark02")
                        .IsRequired()
                        .HasColumnType("varchar(225)")
                        .HasComment("หมายเหตุ 02");

                    b.Property<string>("remark03")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 03");

                    b.Property<string>("remark04")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 04");

                    b.Property<string>("remark05")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 05");

                    b.Property<string>("remark06")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 06");

                    b.Property<string>("remark07")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 07");

                    b.Property<string>("remark08")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 08");

                    b.Property<string>("remark09")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 09");

                    b.Property<string>("remark10")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("หมายเหตุ 10");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("shippingby")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("จัดส่งโดย");

                    b.Property<string>("taxrefund")
                        .HasColumnType("text");

                    b.Property<int>("taxreportaddrid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatdue")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("ภาษีมูลค่าเพิ่ม");

                    b.Property<string>("vatisout")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasComment("แยกนอก/รวมใน");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("อัตราภาษีมูลค่าเพิ่ม");

                    b.Property<string>("vattype")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasComment("ภาษีมูลค่าเพิ่ม");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("invtrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Logs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("exception")
                        .HasColumnType("text");

                    b.Property<string>("level")
                        .HasColumnType("text");

                    b.Property<string>("logger")
                        .HasColumnType("text");

                    b.Property<int>("logid")
                        .HasColumnType("integer");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<string>("thread")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.MemberGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("membergroup", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Menu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("color")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("command")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("desc1")
                        .HasColumnType("text");

                    b.Property<string>("desc2")
                        .HasColumnType("text");

                    b.Property<string>("icon")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("menutype")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("module")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("parrentmenu")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("path")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("menu", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Models", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("model", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Mop", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("mop", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.OrderTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("backqty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("child")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("deliverydate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<decimal>("discamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("discstr")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("lot")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ordertrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("parent")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("prodtype")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<decimal>("qty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark02")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark03")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark04")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark05")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark06")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark07")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark08")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark09")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("stdqty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<int>("umstdid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("ordertrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("productid");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.HasIndex("warehouseid");

                    b.ToTable("ordertrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.OrderTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("approveby")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("approveddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("approvestatus")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("attach_file_01")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_02")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_03")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_04")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attach_file_05")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("contactname")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("creditterm")
                        .HasColumnType("integer");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<decimal>("currencyrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("custaddr")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("custdeliaddr")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("custdeliaddredit")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("deliverydate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("doccloseddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("doccode")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docisclosed")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("docrefnumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime?>("duedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("estimatedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("footcurrafdiscamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurramt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrbfvatamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrdiscamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("footcurrdiscstr")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("footcurrnetamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrvatamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrwithouttaxamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footcurrwithtaxamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdafdiscamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdbfvatamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstddiscamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdnetamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdvatamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdwithouttaxamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("footstdwithtaxamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("foottotalqty")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("refdoccode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("refdoctype")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark02")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark03")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark04")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark05")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark06")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark07")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark08")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark09")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("sendby")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<int?>("warehouseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("ordertrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PayInTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("payintrnhid")
                        .HasColumnType("integer");

                    b.Property<int?>("paymentid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("stat")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("paymentid");

                    b.ToTable("payintrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("acpayee")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("bankbranchid")
                        .HasColumnType("integer");

                    b.Property<int?>("bankid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("chequereturncode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("code")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("custvendorid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("depositwithdraw")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("duedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("inout")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("orderbearer")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("passdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("payamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("paydate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("paygroup")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("paynameincheque")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("paynameincheque2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("payrecv")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("payrecv2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("paytype")
                        .HasColumnType("text");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("returnattime")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("returndate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("stat")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("step")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("systype")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("tobankdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bankbranchid");

                    b.HasIndex("bankid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("vendorid");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PayType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("group")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("inout")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("isdeposit")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("iswithdraw")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("paytype", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Plans", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Positions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PostalCountry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("code2")
                        .HasColumnType("text");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("postalcountry", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PostalDisrict", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("countrycode")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("provincecode")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("postaldisrict", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PostalProvince", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("countrycode")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("postalprovince", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PostalSubdisrict", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("countrycode")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("disrictcode")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("postal_code")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("provincecode")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("postalsubdisrict", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Seq")
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<decimal>("depositamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docstatus")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<int>("partialtype")
                        .HasColumnType("integer");

                    b.Property<decimal>("payamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int>("prereceipttrnhid")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int?>("receipttrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("refdocheaddoctype")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("refdocheadid")
                        .HasColumnType("integer");

                    b.Property<string>("refdocitemid")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("refinvoicedocgroup")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("refinvoicedoctype")
                        .HasColumnType("text");

                    b.Property<int>("refinvoiceid")
                        .HasColumnType("integer");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<decimal>("whtamt")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("prereceipttrnhid");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("prereceipttrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("Refdocdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("addressofficedetail")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("addressofficeid")
                        .HasColumnType("integer");

                    b.Property<string>("attach_file_01")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_02")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_03")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_04")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_05")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("contactname")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("contactname2")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("contacttel")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("currencycode")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<decimal>("currencyrate")
                        .HasColumnType("numeric");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<string>("custsuppbranchcode")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("custsupptaxid")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("doccode")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docrefnumber")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("islocked")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("refdoccode")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark02")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark03")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark04")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark05")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark06")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark07")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark08")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark09")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("prereceipttrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnRef", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Contactid")
                        .HasColumnType("integer");

                    b.Property<int?>("Currencyid")
                        .HasColumnType("integer");

                    b.Property<int?>("Customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("SaleManid")
                        .HasColumnType("integer");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("integer");

                    b.Property<decimal>("bfcurrvatamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("bfstdvatamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("docstatus")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("invtrndid")
                        .HasColumnType("integer");

                    b.Property<int?>("invtrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("itemreftype")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("prereceipttrndid")
                        .HasColumnType("integer");

                    b.Property<int?>("prereceipttrnhid")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<decimal>("rate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<decimal>("vatcurramount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("vatstdamount")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("Contactid");

                    b.HasIndex("Currencyid");

                    b.HasIndex("Customerid");

                    b.HasIndex("SaleManid");

                    b.HasIndex("Vendorid");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.ToTable("prereceipttrnref", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PriceList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("datasource")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("discountitem")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("exp_prod_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("exp_stdum_per_umratio")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("pricelist_type")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("qtysale")
                        .HasColumnType("integer");

                    b.Property<int>("qtystd")
                        .HasColumnType("integer");

                    b.Property<int?>("stdumid")
                        .HasColumnType("integer");

                    b.Property<int?>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("pricelist", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PricelistTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("discountitem")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("exp_prod_name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("exp_stdum_per_umratio")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("pricelisttrnhid")
                        .HasColumnType("integer");

                    b.Property<int?>("productid")
                        .HasColumnType("integer");

                    b.Property<decimal>("qtysale")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("qtystd")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<int?>("stdumid")
                        .HasColumnType("integer");

                    b.Property<int?>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("pricelisttrnhid");

                    b.HasIndex("productid");

                    b.ToTable("pricelisttrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PricelistTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("inactive")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("pricelisttype")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.ToTable("pricelisttrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProdType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("flag")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("prodtype", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("AccWorkInProcessId")
                        .HasColumnType("integer");

                    b.Property<int?>("accbuycashid")
                        .HasColumnType("integer");

                    b.Property<int?>("accbuycreditid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccngoodid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccnpriceid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccostid")
                        .HasColumnType("integer");

                    b.Property<int?>("accincreasedebtpriceincreaseid")
                        .HasColumnType("integer");

                    b.Property<int?>("accincreasedebtreturnincreaseid")
                        .HasColumnType("integer");

                    b.Property<int?>("accmaterialrequistionid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsalecashid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsalecreditid")
                        .HasColumnType("integer");

                    b.Property<int?>("accstockid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsuppliedusedid")
                        .HasColumnType("integer");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<int?>("brandid")
                        .HasColumnType("integer");

                    b.Property<int?>("budgetgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("cardfee")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("categoryid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("colorid")
                        .HasColumnType("integer");

                    b.Property<string>("commision")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("designid")
                        .HasColumnType("integer");

                    b.Property<int?>("formatid")
                        .HasColumnType("integer");

                    b.Property<int?>("gradeid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("inputtax")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("minprice")
                        .HasColumnType("numeric");

                    b.Property<int?>("modelid")
                        .HasColumnType("integer");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(160)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("prodtype")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("productgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("purchaseprice")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark1")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark2")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark3")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark4")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark5")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark6")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark7")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark8")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark9")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("saleprice")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("salestax")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("showinventories")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("sizeid")
                        .HasColumnType("integer");

                    b.Property<string>("sname1")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("sname2")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("status")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("stdcost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric");

                    b.Property<string>("stockcounting")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("taxrate")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("weightid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("brandid");

                    b.HasIndex("categoryid");

                    b.HasIndex("colorid");

                    b.HasIndex("companyid");

                    b.HasIndex("designid");

                    b.HasIndex("formatid");

                    b.HasIndex("gradeid");

                    b.HasIndex("modelid");

                    b.HasIndex("productgroupid");

                    b.HasIndex("sizeid");

                    b.HasIndex("weightid");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductBarcode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Productumid")
                        .HasColumnType("integer");

                    b.Property<string>("barcode")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("memberprice1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice4")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice6")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice7")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice8")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("productid");

                    b.ToTable("productbarcode", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("AccWorkInProcessId")
                        .HasColumnType("integer");

                    b.Property<int?>("accbuycashid")
                        .HasColumnType("integer");

                    b.Property<int?>("accbuycreditid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccngoodid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccnpriceid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccostid")
                        .HasColumnType("integer");

                    b.Property<int?>("accincreasedebtpriceincreaseid")
                        .HasColumnType("integer");

                    b.Property<int?>("accincreasedebtreturnincreaseid")
                        .HasColumnType("integer");

                    b.Property<int?>("accmaterialrequistionid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsalecashid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsalecreditid")
                        .HasColumnType("integer");

                    b.Property<int?>("accstockid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsuppliedusedid")
                        .HasColumnType("integer");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<int?>("budgetgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("productgroup", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("customerid")
                        .HasColumnType("integer");

                    b.Property<string>("discount")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("memberprice1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice4")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice6")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice7")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice8")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("productumid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.HasIndex("productid");

                    b.ToTable("productmembe", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductSet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("prodtype")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("remark")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("remark2")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("setprint")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("sname1")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("sname2")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(10)");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("productset", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductSetDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("productsetid")
                        .HasColumnType("integer");

                    b.Property<int>("qty")
                        .HasColumnType("integer");

                    b.Property<decimal>("saleprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("settype")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<int>("umqty")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("productid");

                    b.HasIndex("productsetid");

                    b.ToTable("productsetdetail", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductShelf", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("height")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("length")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<int>("shelfid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.Property<decimal>("width")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.ToTable("productshelf", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductUnit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("defaultbuy")
                        .HasColumnType("integer");

                    b.Property<int>("defaultsale")
                        .HasColumnType("integer");

                    b.Property<decimal>("memberprice1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice4")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice6")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice7")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice8")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<decimal>("qty")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("stdumid")
                        .HasColumnType("integer");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("productid");

                    b.ToTable("productunit", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("planid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("RefDocHeadId")
                        .HasColumnType("integer");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<decimal>("depositamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docstatus")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<int>("partialtype")
                        .HasColumnType("integer");

                    b.Property<decimal>("payamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int>("receipttrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("refdocheaddoctype")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("refdocitemid")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("refinvoicedocgroup")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("refinvoicedoctype")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("refinvoiceid")
                        .HasColumnType("integer");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<decimal>("whtamt")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("receipttrnhid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("receipttrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("addressofficedetail")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("addressofficeid")
                        .HasColumnType("integer");

                    b.Property<string>("attach_file_01")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_02")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_03")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_04")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("attach_file_05")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<int?>("contactid")
                        .HasColumnType("integer");

                    b.Property<string>("contactname")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("contactname2")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("contacttel")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("currencycode")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("currencyid")
                        .HasColumnType("integer");

                    b.Property<decimal>("currencyrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<string>("custsuppbranchcode")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("custsupptaxid")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("doccode")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docrefnumber")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("islocked")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<string>("refdoccode")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("refdocdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("remark01")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark02")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark03")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark04")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark05")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark06")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark07")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark08")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark09")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("salemanid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("contactid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("gltrnhid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("salemanid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("receipttrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnRef", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Contactid")
                        .HasColumnType("integer");

                    b.Property<int?>("Currencyid")
                        .HasColumnType("integer");

                    b.Property<int?>("Customerid")
                        .HasColumnType("integer");

                    b.Property<int?>("InvTrnDId")
                        .HasColumnType("integer");

                    b.Property<int?>("SaleManid")
                        .HasColumnType("integer");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("integer");

                    b.Property<decimal>("bfcurrvatamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("bfstdvatamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("docstatus")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("doctype")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("invtrnhid")
                        .HasColumnType("integer");

                    b.Property<string>("itemreftype")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<decimal>("rate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("receipttrndid")
                        .HasColumnType("integer");

                    b.Property<int?>("receipttrnhid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<decimal>("vatcurramount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("vatstdamount")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("Contactid");

                    b.HasIndex("Currencyid");

                    b.HasIndex("Customerid");

                    b.HasIndex("SaleManid");

                    b.HasIndex("Vendorid");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.ToTable("receipttrnref", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("name1")
                        .HasColumnType("text");

                    b.Property<string>("name2")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.RoleMenu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("canadd")
                        .HasColumnType("boolean");

                    b.Property<bool>("candelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("canedit")
                        .HasColumnType("boolean");

                    b.Property<bool>("canopen")
                        .HasColumnType("boolean");

                    b.Property<bool>("canprint")
                        .HasColumnType("boolean");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("menucode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("rolecode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("rolemenu", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.RoleUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("rolecode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int>("usercode")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleArea", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("salearea", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleMan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("card_no")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("commission")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("line")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("login")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("mobile")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("position")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("prefix_en")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("prefix_th")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("sale_area")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sale_team")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("signature")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("tel")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("saleman", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleTeam", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("saleteam", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Section", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Segmentation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("segmentation", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Serial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("lot")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("pstep")
                        .HasColumnType("integer");

                    b.Property<decimal>("qty")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(4)");

                    b.Property<int>("sstep")
                        .HasColumnType("integer");

                    b.Property<decimal>("umqty")
                        .HasColumnType("numeric(18,0)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("productid");

                    b.HasIndex("warehouseid");

                    b.ToTable("serial", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SerialTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("calcflag")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("productid")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int?>("refheadid")
                        .HasColumnType("integer");

                    b.Property<int?>("refitemid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("serialcode")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("shelfcode")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int?>("warehouseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("productid");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.HasIndex("warehouseid");

                    b.ToTable("serialtrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("AccWorkInProcessId")
                        .HasColumnType("integer");

                    b.Property<int?>("accbuycashid")
                        .HasColumnType("integer");

                    b.Property<int?>("accbuycreditid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccngoodid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccnpriceid")
                        .HasColumnType("integer");

                    b.Property<int?>("acccostid")
                        .HasColumnType("integer");

                    b.Property<int?>("accincreasedebtpriceincreaseid")
                        .HasColumnType("integer");

                    b.Property<int?>("accincreasedebtreturnincreaseid")
                        .HasColumnType("integer");

                    b.Property<int?>("accmaterialrequistionid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsalecashid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsalecreditid")
                        .HasColumnType("integer");

                    b.Property<int?>("accstockid")
                        .HasColumnType("integer");

                    b.Property<int?>("accsuppliedusedid")
                        .HasColumnType("integer");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<int?>("brandid")
                        .HasColumnType("integer");

                    b.Property<int?>("budgetgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("cardfee")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("categoryid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("colorid")
                        .HasColumnType("integer");

                    b.Property<string>("commision")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("designid")
                        .HasColumnType("integer");

                    b.Property<int?>("formatid")
                        .HasColumnType("integer");

                    b.Property<int?>("gradeid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("inputtax")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("minprice")
                        .HasColumnType("numeric");

                    b.Property<int?>("modelid")
                        .HasColumnType("integer");

                    b.Property<string>("name1")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("prodtype")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("productgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("purchaseprice")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("remark1")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark2")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark3")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark4")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark5")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark6")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark7")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark8")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark9")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("saleprice")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("salestax")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("showinventories")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("sizeid")
                        .HasColumnType("integer");

                    b.Property<string>("sname")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("sname2")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("status")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("stdcost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric");

                    b.Property<string>("stockcounting")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("taxrate")
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("weightid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("brandid");

                    b.HasIndex("categoryid");

                    b.HasIndex("colorid");

                    b.HasIndex("companyid");

                    b.HasIndex("designid");

                    b.HasIndex("formatid");

                    b.HasIndex("gradeid");

                    b.HasIndex("modelid");

                    b.HasIndex("productgroupid");

                    b.HasIndex("sizeid");

                    b.HasIndex("weightid");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ServiceMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<string>("discount")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("memberprice1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice4")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice6")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice7")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice8")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("serviceid")
                        .HasColumnType("integer");

                    b.Property<int?>("serviceumid")
                        .HasColumnType("integer");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.HasIndex("serviceid");

                    b.ToTable("servicemember", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ServiceUnit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int>("defaultbuy")
                        .HasColumnType("integer");

                    b.Property<int>("defaultsale")
                        .HasColumnType("integer");

                    b.Property<decimal>("memberprice1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice4")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice6")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice7")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("memberprice8")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("qty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<decimal>("stdprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("stdumid")
                        .HasColumnType("integer");

                    b.Property<int>("umid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("companyid");

                    b.ToTable("serviceunit", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Shelf", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("height")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("length")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int>("warehouseid")
                        .HasColumnType("integer");

                    b.Property<decimal>("width")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.HasIndex("warehouseid");

                    b.ToTable("shelf", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Shipping", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("shipping", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Size", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("size", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.StorageImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("alt")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("caption")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("header")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("refdocid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("seq")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("source")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sourceimage")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("storageimage", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SysOption", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("assetaccountbookid")
                        .HasColumnType("integer");

                    b.Property<int?>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("buywarehouseid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("carryingamountdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("controllot")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("controlserial")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("costcnbuy")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("costcnsale")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("costcountstockdoc")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("costproductzero")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("costreturnwithdraw")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("cscost")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("csglpost")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("docformatdoc")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("docrundoclen")
                        .HasColumnType("integer");

                    b.Property<string>("docyearmode")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("endaccountdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("fgcost")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("fgglpost")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("glformatdoc")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("glheadmessage")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("glrundoclen")
                        .HasColumnType("integer");

                    b.Property<string>("glyearmode")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("inputitemamt")
                        .HasColumnType("integer");

                    b.Property<int>("inputitemamtdecimal")
                        .HasColumnType("integer");

                    b.Property<int>("inputitemqty")
                        .HasColumnType("integer");

                    b.Property<int>("inputitemqtydecimal")
                        .HasColumnType("integer");

                    b.Property<int>("inputprice")
                        .HasColumnType("integer");

                    b.Property<int>("inputpricedecimal")
                        .HasColumnType("integer");

                    b.Property<int>("inputvat")
                        .HasColumnType("integer");

                    b.Property<int>("inputvatdecimal")
                        .HasColumnType("integer");

                    b.Property<int>("insuranaccountbookid")
                        .HasColumnType("integer");

                    b.Property<string>("postaccount")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("projectid")
                        .HasColumnType("integer");

                    b.Property<int>("reportitemamt")
                        .HasColumnType("integer");

                    b.Property<int>("reportitemamtdecimal")
                        .HasColumnType("integer");

                    b.Property<int>("reportitemqty")
                        .HasColumnType("integer");

                    b.Property<int>("reportitemqtydecimal")
                        .HasColumnType("integer");

                    b.Property<int>("reportprice")
                        .HasColumnType("integer");

                    b.Property<int>("reportpricedecimal")
                        .HasColumnType("integer");

                    b.Property<int>("reportvat")
                        .HasColumnType("integer");

                    b.Property<int>("reportvatdecimal")
                        .HasColumnType("integer");

                    b.Property<int>("revalueaccountbookid")
                        .HasColumnType("integer");

                    b.Property<string>("rmcost")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("rmglpost")
                        .HasColumnType("varchar(2)");

                    b.Property<int>("salewarehouseid")
                        .HasColumnType("integer");

                    b.Property<int>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("selectbuyprice")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("selectsaleprice")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("startaccountdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("startsystemdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("stockcounting")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("taxapprovedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("taxapproveno")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("taxpayname")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("taxpayposition")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(1)");

                    b.HasKey("id");

                    b.ToTable("sysoption", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.UM", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("um", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("confirmpassword")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("firstname")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("lastname")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("password")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("token")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("usertype")
                        .HasColumnType("varchar(150)");

                    b.HasKey("id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.VatType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("rate")
                        .HasColumnType("numeric(10,0)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int>("vat_type")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("vattype", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Vendor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("accreceivableid")
                        .HasColumnType("integer");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("bankbranch")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("bankcode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("billingcond")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("bookbankname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("bookbankno")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("branchcode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("branchname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("bussinesstype")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("cid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<decimal>("creditamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("creditdays")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("creditdays_billing")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("currencycode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("discountendbill")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("discountitem")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("fax")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("firstname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("firstname2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("headoffice")
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("lastname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("lastname2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("methodofpaymentcode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("midname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("midname2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name1")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name2")
                        .HasColumnType("text");

                    b.Property<string>("prename")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("promotioncode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("receivingdatecond")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("remark1")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark10")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark2")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark3")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark4")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark5")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark6")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark7")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark8")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("remark9")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("shippingby")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("singlelineaddress")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("singlelineaddress2")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("sname1")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sname2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("status")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("taxid")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("tel")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("teletax")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("vatisout")
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("vatrate")
                        .HasColumnType("numeric");

                    b.Property<string>("vattype")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("vendorgroupid")
                        .HasColumnType("integer");

                    b.Property<string>("vendortype")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("website")
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("accreceivableid");

                    b.HasIndex("companyid");

                    b.HasIndex("vendorgroupid");

                    b.ToTable("vendor", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.VendorGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("acchartid")
                        .HasColumnType("integer");

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("vendorgroup", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Warehouse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<string>("warehousetype")
                        .HasColumnType("varchar(25)");

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.ToTable("warehouse", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.WarehouseType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("warehousetype", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Weight", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y")
                        .HasComment("active");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("inactivedate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("varchar(252)");

                    b.Property<string>("name2")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("weight", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.WhTrnD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("incometype")
                        .HasColumnType("varchar(25)");

                    b.Property<decimal>("payamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<decimal>("taxrate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("taxvalue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<decimal>("valueaftertax")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("whtrnhid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.HasIndex("whtrnhid");

                    b.ToTable("whtrnd", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.WhTrnH", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("bookid")
                        .HasColumnType("integer");

                    b.Property<int>("branchid")
                        .HasColumnType("integer");

                    b.Property<int>("companyid")
                        .HasColumnType("integer");

                    b.Property<string>("createapp")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime?>("createatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createby")
                        .HasColumnType("text");

                    b.Property<int?>("customerid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("dateoffiling")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departmentid")
                        .HasColumnType("integer");

                    b.Property<string>("doccode")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("docdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("docrefnumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("docstatus")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("doctype")
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("gltrnhcaid")
                        .HasColumnType("integer");

                    b.Property<int?>("gltrnhid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("monthoffiling")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("plansld")
                        .HasColumnType("integer");

                    b.Property<int?>("projectid")
                        .HasColumnType("integer");

                    b.Property<int?>("refdocid")
                        .HasColumnType("integer");

                    b.Property<string>("refdoctype")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("sectionid")
                        .HasColumnType("integer");

                    b.Property<string>("systype")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("taxdeduction")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("taxseq")
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("totalpayamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("totaltaxvalue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("totalvalueaftertax")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("updateatutc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updateby")
                        .HasColumnType("text");

                    b.Property<int?>("vendorid")
                        .HasColumnType("integer");

                    b.Property<string>("whsection")
                        .HasColumnType("varchar(25)");

                    b.HasKey("id");

                    b.HasIndex("bookid");

                    b.HasIndex("branchid");

                    b.HasIndex("companyid");

                    b.HasIndex("customerid");

                    b.HasIndex("departmentid");

                    b.HasIndex("plansld");

                    b.HasIndex("projectid");

                    b.HasIndex("sectionid");

                    b.HasIndex("vendorid");

                    b.ToTable("whtrnh", (string)null);
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccBook", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Accbooks")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Acchart", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Accharts")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRole", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("AccRoles")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRoleTemplateD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("AccRoleTemplateDs")
                        .HasForeignKey("acchartid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.AccRoleTemplateH", "AccRoleTemplateH")
                        .WithMany("AccRoleTemplateDs")
                        .HasForeignKey("accroletemplatehid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccRoleTemplateH");

                    b.Navigation("Acchart");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRoleTemplateH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("AccRoleTemplateHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Asset", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("Assets")
                        .HasForeignKey("acchartid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.AssetGroup", "AssetGroup")
                        .WithMany("Assets")
                        .HasForeignKey("assetgroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("Assets")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Assets")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Acchart");

                    b.Navigation("AssetGroup");

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AssetGroup", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("AssetGroups")
                        .HasForeignKey("acchartid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("AssetGroups")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Acchart");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Bank", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Banks")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BankBranch", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Bank", "Bank")
                        .WithMany("BankBranchs")
                        .HasForeignKey("bankid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("BankBranchs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.BillTrnH", "BillTrnH")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("billtrnhid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany()
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("BillTrnDs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BillTrnH");

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany()
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("BillTrnHs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnRef", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("BillTrnRefs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Bilpay", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("Bilpays")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Bilpays")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Book", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.AccBook", "AccBook")
                        .WithMany("Books")
                        .HasForeignKey("accbookid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.AccRoleTemplateH", "AccRoleTemplateH")
                        .WithMany("Books")
                        .HasForeignKey("accroletemplatehid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("Books")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Books")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccBook");

                    b.Navigation("AccRoleTemplateH");

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BookBank", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("BookBanks")
                        .HasForeignKey("acchartid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.BankBranch", "BankBranch")
                        .WithMany("BookBanks")
                        .HasForeignKey("bankbranchid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Bank", "Bank")
                        .WithMany("BookBanks")
                        .HasForeignKey("bankid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("BookBanks")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Acchart");

                    b.Navigation("Bank");

                    b.Navigation("BankBranch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Branch", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Brand", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Brands")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Category", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Categorys")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Color", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Colors")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Contact", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Currency", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Currencys")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.CustGroup", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("CustGroups")
                        .HasForeignKey("acchartid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("CustGroups")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Acchart");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Customer", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Bank", "Bank")
                        .WithMany("Customers")
                        .HasForeignKey("bankid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.CustGroup", "CustGroup")
                        .WithMany("Customers")
                        .HasForeignKey("custgroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.MemberGroup", "MemberGroup")
                        .WithMany("Customers")
                        .HasForeignKey("membergroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("Customers")
                        .HasForeignKey("receivableacchartid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleArea", "SaleArea")
                        .WithMany("Customers")
                        .HasForeignKey("saleareaid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("Customers")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleTeam", "SaleTeam")
                        .WithMany("Customers")
                        .HasForeignKey("saleteamid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Segmentation", "Segmentation")
                        .WithMany("Customers")
                        .HasForeignKey("segmentationid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Acchart");

                    b.Navigation("Bank");

                    b.Navigation("Company");

                    b.Navigation("CustGroup");

                    b.Navigation("MemberGroup");

                    b.Navigation("SaleArea");

                    b.Navigation("SaleMan");

                    b.Navigation("SaleTeam");

                    b.Navigation("Segmentation");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.CustomerCredit", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("CustomeCredits")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Department", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("Departments")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Descriptions", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Descriptions")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Design", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Designs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.DocLink", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("DocLinks")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("DocLinks")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("DocLinks")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("DocLinks")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("DocLinks")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("DocLinks")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("DocLinks")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Format", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Formats")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.FormMaster", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("FormMasters")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.FromRef", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("FromRefs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.GLTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.AccBook", "AccBook")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("accbookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("gltrnhid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("GLTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccBook");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.GLTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.AccBook", "AccBook")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("accbookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("GLTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccBook");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Grade", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Grades")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.InvTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Contact", null)
                        .WithMany("InvTrnDs")
                        .HasForeignKey("Contactid");

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", null)
                        .WithMany("InvTrnDs")
                        .HasForeignKey("SaleManid");

                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.InvTrnH", "InvTrnH")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("invtrnhid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Warehouse", "Warehouse")
                        .WithMany("InvTrnDs")
                        .HasForeignKey("warehouseid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("InvTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Product");

                    b.Navigation("Project");

                    b.Navigation("Section");

                    b.Navigation("Vendor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.InvTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("InvTrnHs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.MemberGroup", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("MemberGroups")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Models", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Modelss")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Mop", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Mops")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.OrderTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.OrderTrnH", "OrderTrnH")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("ordertrnhid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Warehouse", "Warehouse")
                        .WithMany("OrderTrnDs")
                        .HasForeignKey("warehouseid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("OrderTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Product");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.OrderTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("OrderTrnHs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PayInTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("PayInTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PayInTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Payment", "Payment")
                        .WithMany("PayInTrnDs")
                        .HasForeignKey("paymentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Payment", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.BankBranch", "BankBranch")
                        .WithMany("Payments")
                        .HasForeignKey("bankbranchid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Bank", "Bank")
                        .WithMany("Payments")
                        .HasForeignKey("bankid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("Payments")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Payments")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany("Payments")
                        .HasForeignKey("gltrnhid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("Payments")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bank");

                    b.Navigation("BankBranch");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("GLTrnH");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Plans", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Plans")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Positions", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany()
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.PreReceiptTrnH", "PreReceiptTrnH")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("prereceipttrnhid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("PreReceiptTrnDs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("PreReceiptTrnH");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany()
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("PreReceiptTrnHs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnRef", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Contact", null)
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("Contactid");

                    b.HasOne("RichnessSoft.Entity.Model.Currency", null)
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("Currencyid");

                    b.HasOne("RichnessSoft.Entity.Model.Customer", null)
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("Customerid");

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", null)
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("SaleManid");

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", null)
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("Vendorid");

                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("PreReceiptTrnRefs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PriceList", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PriceLists")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("PriceLists")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PricelistTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PricelistTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.PricelistTrnH", "PricelistTrnH")
                        .WithMany("PricelistTrnDs")
                        .HasForeignKey("pricelisttrnhid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("PricelistTrnDs")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("PricelistTrnH");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PricelistTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("PricelistTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("PricelistTrnHs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Product", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("brandid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("colorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Design", "Design")
                        .WithMany("Products")
                        .HasForeignKey("designid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Format", "Format")
                        .WithMany("Products")
                        .HasForeignKey("formatid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Grade", "Grade")
                        .WithMany("Products")
                        .HasForeignKey("gradeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Models", "Models")
                        .WithMany("Products")
                        .HasForeignKey("modelid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("productgroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("sizeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Weight", "Weight")
                        .WithMany("Products")
                        .HasForeignKey("weightid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Company");

                    b.Navigation("Design");

                    b.Navigation("Format");

                    b.Navigation("Grade");

                    b.Navigation("Models");

                    b.Navigation("ProductGroup");

                    b.Navigation("Size");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductBarcode", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ProductBarcodes")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("ProductBarcodes")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductGroup", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ProductGroups")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductMember", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ProductMembers")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("ProductMembers")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("ProductMembers")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductSet", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ProductSets")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductSetDetail", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ProductSetDetails")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("ProductSetDetails")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.ProductSet", "ProductSet")
                        .WithMany("ProductSetDetails")
                        .HasForeignKey("productsetid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("ProductSet");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductUnit", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ProductUnits")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Project", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany()
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.ReceiptTrnH", "ReceiptTrnH")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("receipttrnhid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("ReceiptTrnDs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("ReceiptTrnH");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Contact", "Contact")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("contactid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Currency", "Currency")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.GLTrnH", "GLTrnH")
                        .WithMany()
                        .HasForeignKey("gltrnhid");

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", "SaleMan")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("salemanid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("ReceiptTrnHs")
                        .HasForeignKey("vendorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("GLTrnH");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("SaleMan");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnRef", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Contact", null)
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("Contactid");

                    b.HasOne("RichnessSoft.Entity.Model.Currency", null)
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("Currencyid");

                    b.HasOne("RichnessSoft.Entity.Model.Customer", null)
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("Customerid");

                    b.HasOne("RichnessSoft.Entity.Model.SaleMan", null)
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("SaleManid");

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", null)
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("Vendorid");

                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("ReceiptTrnRefs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleArea", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("SaleAreas")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleMan", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("SaleMans")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleTeam", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("SaleTeams")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Section", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Sections")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Segmentation", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Segmentations")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Serial", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("Serials")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Serials")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("Serials")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Warehouse", "Warehouse")
                        .WithMany("Serials")
                        .HasForeignKey("warehouseid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SerialTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Product", "Product")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Warehouse", "Warehouse")
                        .WithMany("SerialTrnHs")
                        .HasForeignKey("warehouseid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Product");

                    b.Navigation("Project");

                    b.Navigation("Section");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Service", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Brand", "Brand")
                        .WithMany("Services")
                        .HasForeignKey("brandid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Color", "Color")
                        .WithMany("Services")
                        .HasForeignKey("colorid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Services")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Design", "Design")
                        .WithMany("Services")
                        .HasForeignKey("designid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Format", "Format")
                        .WithMany("Services")
                        .HasForeignKey("formatid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Grade", "Grade")
                        .WithMany("Services")
                        .HasForeignKey("gradeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Models", "Model")
                        .WithMany("Services")
                        .HasForeignKey("modelid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.ProductGroup", "ProductGroup")
                        .WithMany("Services")
                        .HasForeignKey("productgroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Size", "Size")
                        .WithMany("Services")
                        .HasForeignKey("sizeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Weight", "Weight")
                        .WithMany("Services")
                        .HasForeignKey("weightid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Company");

                    b.Navigation("Design");

                    b.Navigation("Format");

                    b.Navigation("Grade");

                    b.Navigation("Model");

                    b.Navigation("ProductGroup");

                    b.Navigation("Size");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ServiceMember", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ServiceMembers")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Customer")
                        .WithMany("ServiceMembers")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Service", "Service")
                        .WithMany("ServiceMembers")
                        .HasForeignKey("serviceid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ServiceUnit", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Service", "Service")
                        .WithMany("ServiceUnits")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("ServiceUnits")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Shelf", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Shelfs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Warehouse", "Warehouse")
                        .WithMany("Shelfs")
                        .HasForeignKey("warehouseid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Shipping", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Shippings")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Size", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Sizes")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.UM", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("UMs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Vendor", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Acchart", "Acchart")
                        .WithMany("Vendors")
                        .HasForeignKey("accreceivableid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Vendors")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.VendorGroup", "VendorGroup")
                        .WithMany("Vendors")
                        .HasForeignKey("vendorgroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Acchart");

                    b.Navigation("Company");

                    b.Navigation("VendorGroup");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.VendorGroup", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("VendorGroups")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Warehouse", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("Warehouses")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Warehouses")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Weight", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("Weights")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.WhTrnD", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.WhTrnH", "WhTrnH")
                        .WithMany("WhTrnDs")
                        .HasForeignKey("whtrnhid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");

                    b.Navigation("WhTrnH");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.WhTrnH", b =>
                {
                    b.HasOne("RichnessSoft.Entity.Model.Book", "Book")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Branch", "Branch")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("branchid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Company", "Company")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RichnessSoft.Entity.Model.Customer", "Contact")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("customerid");

                    b.HasOne("RichnessSoft.Entity.Model.Department", "Department")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Plans", "Plans")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("plansld")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Project", "Project")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Section", "Section")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("sectionid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RichnessSoft.Entity.Model.Vendor", "Vendor")
                        .WithMany("WhTrnHs")
                        .HasForeignKey("vendorid");

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Department");

                    b.Navigation("Plans");

                    b.Navigation("Project");

                    b.Navigation("Section");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccBook", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Acchart", b =>
                {
                    b.Navigation("AccRoleTemplateDs");

                    b.Navigation("AssetGroups");

                    b.Navigation("Assets");

                    b.Navigation("BookBanks");

                    b.Navigation("CustGroups");

                    b.Navigation("Customers");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AccRoleTemplateH", b =>
                {
                    b.Navigation("AccRoleTemplateDs");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.AssetGroup", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Bank", b =>
                {
                    b.Navigation("BankBranchs");

                    b.Navigation("BookBanks");

                    b.Navigation("Customers");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BankBranch", b =>
                {
                    b.Navigation("BookBanks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.BillTrnH", b =>
                {
                    b.Navigation("BillTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Book", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("DocLinks");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Branch", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("Bilpays");

                    b.Navigation("Books");

                    b.Navigation("DocLinks");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PayInTrnDs");

                    b.Navigation("Payments");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("Serials");

                    b.Navigation("Warehouses");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Brand", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Color", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Company", b =>
                {
                    b.Navigation("AccRoleTemplateHs");

                    b.Navigation("AccRoles");

                    b.Navigation("Accbooks");

                    b.Navigation("Accharts");

                    b.Navigation("AssetGroups");

                    b.Navigation("Assets");

                    b.Navigation("BankBranchs");

                    b.Navigation("Banks");

                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("Bilpays");

                    b.Navigation("BookBanks");

                    b.Navigation("Books");

                    b.Navigation("Branches");

                    b.Navigation("Brands");

                    b.Navigation("Categorys");

                    b.Navigation("Colors");

                    b.Navigation("Contacts");

                    b.Navigation("Currencys");

                    b.Navigation("CustGroups");

                    b.Navigation("CustomeCredits");

                    b.Navigation("Customers");

                    b.Navigation("Departments");

                    b.Navigation("Descriptions");

                    b.Navigation("Designs");

                    b.Navigation("DocLinks");

                    b.Navigation("FormMasters");

                    b.Navigation("Formats");

                    b.Navigation("FromRefs");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");

                    b.Navigation("Grades");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("MemberGroups");

                    b.Navigation("Modelss");

                    b.Navigation("Mops");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PayInTrnDs");

                    b.Navigation("Payments");

                    b.Navigation("Plans");

                    b.Navigation("Positions");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("PriceLists");

                    b.Navigation("PricelistTrnDs");

                    b.Navigation("PricelistTrnHs");

                    b.Navigation("ProductBarcodes");

                    b.Navigation("ProductGroups");

                    b.Navigation("ProductMembers");

                    b.Navigation("ProductSetDetails");

                    b.Navigation("ProductSets");

                    b.Navigation("ProductUnits");

                    b.Navigation("Products");

                    b.Navigation("Projects");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SaleAreas");

                    b.Navigation("SaleMans");

                    b.Navigation("SaleTeams");

                    b.Navigation("Sections");

                    b.Navigation("Segmentations");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("Serials");

                    b.Navigation("ServiceMembers");

                    b.Navigation("ServiceUnits");

                    b.Navigation("Services");

                    b.Navigation("Shelfs");

                    b.Navigation("Shippings");

                    b.Navigation("Sizes");

                    b.Navigation("UMs");

                    b.Navigation("VendorGroups");

                    b.Navigation("Vendors");

                    b.Navigation("Warehouses");

                    b.Navigation("Weights");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Contact", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Currency", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.CustGroup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Customer", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("Payments");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("PricelistTrnHs");

                    b.Navigation("ProductMembers");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("ServiceMembers");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Department", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("DocLinks");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Design", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Format", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.GLTrnH", b =>
                {
                    b.Navigation("GLTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Grade", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.InvTrnH", b =>
                {
                    b.Navigation("InvTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.MemberGroup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Models", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.OrderTrnH", b =>
                {
                    b.Navigation("OrderTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Payment", b =>
                {
                    b.Navigation("PayInTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Plans", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("DocLinks");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PreReceiptTrnH", b =>
                {
                    b.Navigation("PreReceiptTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.PricelistTrnH", b =>
                {
                    b.Navigation("PricelistTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Product", b =>
                {
                    b.Navigation("InvTrnDs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("PriceLists");

                    b.Navigation("PricelistTrnDs");

                    b.Navigation("ProductBarcodes");

                    b.Navigation("ProductMembers");

                    b.Navigation("ProductSetDetails");

                    b.Navigation("ProductUnits");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductGroup", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ProductSet", b =>
                {
                    b.Navigation("ProductSetDetails");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Project", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("DocLinks");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.ReceiptTrnH", b =>
                {
                    b.Navigation("ReceiptTrnDs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleArea", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleMan", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("Customers");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.SaleTeam", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Section", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("BillTrnRefs");

                    b.Navigation("Departments");

                    b.Navigation("DocLinks");

                    b.Navigation("GLTrnDs");

                    b.Navigation("GLTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("WhTrnDs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Segmentation", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Service", b =>
                {
                    b.Navigation("ServiceMembers");

                    b.Navigation("ServiceUnits");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Size", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Vendor", b =>
                {
                    b.Navigation("BillTrnDs");

                    b.Navigation("BillTrnHs");

                    b.Navigation("InvTrnDs");

                    b.Navigation("InvTrnHs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("OrderTrnHs");

                    b.Navigation("Payments");

                    b.Navigation("PreReceiptTrnDs");

                    b.Navigation("PreReceiptTrnHs");

                    b.Navigation("PreReceiptTrnRefs");

                    b.Navigation("ReceiptTrnDs");

                    b.Navigation("ReceiptTrnHs");

                    b.Navigation("ReceiptTrnRefs");

                    b.Navigation("WhTrnHs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.VendorGroup", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Warehouse", b =>
                {
                    b.Navigation("InvTrnDs");

                    b.Navigation("OrderTrnDs");

                    b.Navigation("SerialTrnHs");

                    b.Navigation("Serials");

                    b.Navigation("Shelfs");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.Weight", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("RichnessSoft.Entity.Model.WhTrnH", b =>
                {
                    b.Navigation("WhTrnDs");
                });
#pragma warning restore 612, 618
        }
    }
}
